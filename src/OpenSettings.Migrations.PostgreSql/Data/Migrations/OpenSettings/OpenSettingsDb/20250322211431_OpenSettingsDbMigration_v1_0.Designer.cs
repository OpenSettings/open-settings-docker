// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OpenSettings.Domains.Sql.DataContext;

#nullable disable

namespace OpenSettings.Migrations.PostgreSql.Data.Migrations.OpenSettings.OpenSettingsDb
{
    [DbContext(typeof(OpenSettingsDbContext))]
    [Migration("20250322211431_OpenSettingsDbMigration_v1_0")]
    partial class OpenSettingsDbMigration_v1_0
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.AppGroupSqlModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameLowercase")
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bytea");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("NameLowercase")
                        .IsUnique();

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("SortOrder");

                    b.HasIndex("UpdatedById");

                    b.ToTable("AppGroups");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.AppIdentifierMappingSqlModel", b =>
                {
                    b.Property<int>("AppId")
                        .HasColumnType("integer");

                    b.Property<int>("IdentifierId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bytea");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AppId", "IdentifierId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IdentifierId");

                    b.HasIndex("SortOrder");

                    b.HasIndex("UpdatedById");

                    b.ToTable("AppIdentifierMappings");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.AppSqlModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("ClientIdLowercase")
                        .HasColumnType("text");

                    b.Property<string>("ClientName")
                        .HasColumnType("text");

                    b.Property<string>("ClientNameLowercase")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNameLowercase")
                        .HasColumnType("text");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<string>("HashedClientSecret")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bytea");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WikiUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("ClientNameLowercase");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GroupId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("UpdatedById");

                    b.ToTable("Apps");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.AppTagMappingSqlModel", b =>
                {
                    b.Property<int>("AppId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AppId", "TagId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TagId");

                    b.ToTable("AppTagMappings");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.ConfigurationSqlModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AppId")
                        .HasColumnType("integer");

                    b.Property<string>("Consumer")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IdentifierId")
                        .HasColumnType("integer");

                    b.Property<bool>("IgnoreIndividualIgnoreOnFileChange")
                        .HasColumnType("boolean");

                    b.Property<bool>("IgnoreIndividualRegistrationMode")
                        .HasColumnType("boolean");

                    b.Property<bool>("IgnoreIndividualStoreInSeparateFile")
                        .HasColumnType("boolean");

                    b.Property<bool>("IgnoreOnFileChange")
                        .HasColumnType("boolean");

                    b.Property<string>("Provider")
                        .HasColumnType("text");

                    b.Property<int>("RegistrationMode")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bytea");

                    b.Property<bool>("StoreInSeparateFile")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IdentifierId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("AppId", "IdentifierId")
                        .IsUnique();

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.IdentifierSqlModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameLowercase")
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bytea");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("NameLowercase");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("SortOrder");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Identifiers");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.InstanceSqlModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AppId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DataAccessType")
                        .HasColumnType("integer");

                    b.Property<string>("DynamicId")
                        .HasColumnType("text");

                    b.Property<string>("Environment")
                        .HasColumnType("text");

                    b.Property<int>("IdentifierId")
                        .HasColumnType("integer");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MachineName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameLowercase")
                        .HasColumnType("text");

                    b.PrimitiveCollection<int[]>("ReloadStrategies")
                        .HasColumnType("integer[]");

                    b.Property<int>("ServiceType")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Urls")
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentifierId");

                    b.HasIndex("NameLowercase");

                    b.HasIndex("AppId", "IdentifierId", "Slug")
                        .IsUnique();

                    b.ToTable("Instances");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.LicenseSqlModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Edition")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ExpiredOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.PrimitiveCollection<string[]>("Features")
                        .HasColumnType("text[]");

                    b.Property<string>("Holder")
                        .HasColumnType("text");

                    b.Property<string>("HolderLowercase")
                        .HasColumnType("text");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<DateTime>("NotBefore")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceIdLowercase")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RevokedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Edition");

                    b.HasIndex("HolderLowercase");

                    b.HasIndex("IsExpired");

                    b.HasIndex("ReferenceIdLowercase")
                        .IsUnique();

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.LockSqlModel", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Owner")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Key");

                    b.ToTable("Locks");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.NotificationSqlModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatorName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpiredOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan?>("ExpiresIn")
                        .HasColumnType("interval");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<int>("Source")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.SettingClassSqlModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<Guid>("Identifier")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Namespace")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("bytea");

                    b.Property<int>("SettingId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SettingId")
                        .IsUnique();

                    b.HasIndex("UpdatedById");

                    b.ToTable("SettingClasses");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.SettingHistorySqlModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompressionLevel")
                        .HasColumnType("integer");

                    b.Property<int>("CompressionType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("Data")
                        .HasColumnType("bytea");

                    b.Property<Guid?>("RestoredById")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bytea");

                    b.Property<int>("SerializerType")
                        .HasColumnType("integer");

                    b.Property<int>("SettingId")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RestoredById");

                    b.HasIndex("SettingId");

                    b.HasIndex("Version");

                    b.HasIndex("Slug", "SettingId")
                        .IsUnique();

                    b.ToTable("SettingHistories");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.SettingSqlModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AppId")
                        .HasColumnType("integer");

                    b.Property<int>("CompressionLevel")
                        .HasColumnType("integer");

                    b.Property<int>("CompressionType")
                        .HasColumnType("integer");

                    b.Property<Guid>("ComputedIdentifier")
                        .HasColumnType("uuid");

                    b.Property<int?>("CopiedFromId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CopiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("Data")
                        .HasColumnType("bytea");

                    b.Property<bool>("DataRestored")
                        .HasColumnType("boolean");

                    b.Property<bool>("DataValidationDisabled")
                        .HasColumnType("boolean");

                    b.Property<int>("IdentifierId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IgnoreOnFileChange")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCopied")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean");

                    b.Property<int>("RegistrationMode")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bytea");

                    b.Property<int>("SerializerType")
                        .HasColumnType("integer");

                    b.Property<bool>("StoreInSeparateFile")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CopiedFromId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IdentifierId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("AppId", "IdentifierId", "ComputedIdentifier")
                        .IsUnique();

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.TagSqlModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameLowercase")
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bytea");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("NameLowercase")
                        .IsUnique();

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("SortOrder");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.UserClaimMappingSqlModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("ClaimId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "ClaimId");

                    b.HasIndex("ClaimId");

                    b.HasIndex("CreatedById");

                    b.ToTable("UserClaimMappings");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.UserClaimSqlModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("TypeLowercase")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<string>("ValueLowercase")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.UserGroupClaimMappingModel", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("ClaimId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GroupId", "ClaimId");

                    b.HasIndex("ClaimId");

                    b.HasIndex("CreatedById");

                    b.ToTable("UserGroupClaimMappings");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.UserGroupMappingSqlModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroupMappings");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.UserGroupNotificationMappingSqlModel", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GroupId", "NotificationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("NotificationId");

                    b.ToTable("UserGroupNotificationMappings");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.UserGroupSqlModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameLowercase")
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.UserNotificationMappingSqlModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DismissedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDismissed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOpened")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsViewed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("OpenedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ViewedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "NotificationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("NotificationId");

                    b.ToTable("UserNotificationMappings");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.UserRoleClaimMappingModel", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("ClaimId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("RoleId", "ClaimId");

                    b.HasIndex("ClaimId");

                    b.HasIndex("CreatedById");

                    b.ToTable("UserRoleClaimMappings");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.UserRoleGroupMappingModel", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("RoleId", "GroupId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GroupId");

                    b.ToTable("UserRoleGroupMappings");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.UserRoleMappingSqlModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoleMappings");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.UserRoleSqlModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameLowercase")
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.UserSqlModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthScheme")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("EmailLowercase")
                        .HasColumnType("text");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("text");

                    b.Property<string>("Initials")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameLowercase")
                        .HasColumnType("text");

                    b.Property<string>("OAuthProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderId")
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bytea");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<string>("UsernameLowercase")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.AppGroupSqlModel", b =>
                {
                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.AppIdentifierMappingSqlModel", b =>
                {
                    b.HasOne("OpenSettings.Domains.Sql.Entities.AppSqlModel", "App")
                        .WithMany("AppIdentifierMappings")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("OpenSettings.Domains.Sql.Entities.IdentifierSqlModel", "Identifier")
                        .WithMany("AppIdentifierMappings")
                        .HasForeignKey("IdentifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("App");

                    b.Navigation("CreatedBy");

                    b.Navigation("Identifier");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.AppSqlModel", b =>
                {
                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("OpenSettings.Domains.Sql.Entities.AppGroupSqlModel", "Group")
                        .WithMany("Apps")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Group");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.AppTagMappingSqlModel", b =>
                {
                    b.HasOne("OpenSettings.Domains.Sql.Entities.AppSqlModel", "App")
                        .WithMany("AppTagMappings")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("OpenSettings.Domains.Sql.Entities.TagSqlModel", "Tag")
                        .WithMany("AppTagMappings")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("App");

                    b.Navigation("CreatedBy");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.ConfigurationSqlModel", b =>
                {
                    b.HasOne("OpenSettings.Domains.Sql.Entities.AppSqlModel", "App")
                        .WithMany("Configurations")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("OpenSettings.Domains.Sql.Entities.IdentifierSqlModel", "Identifier")
                        .WithMany()
                        .HasForeignKey("IdentifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("App");

                    b.Navigation("CreatedBy");

                    b.Navigation("Identifier");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.IdentifierSqlModel", b =>
                {
                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.InstanceSqlModel", b =>
                {
                    b.HasOne("OpenSettings.Domains.Sql.Entities.AppSqlModel", "App")
                        .WithMany("Instances")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSettings.Domains.Sql.Entities.IdentifierSqlModel", "Identifier")
                        .WithMany()
                        .HasForeignKey("IdentifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("App");

                    b.Navigation("Identifier");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.NotificationSqlModel", b =>
                {
                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.SettingClassSqlModel", b =>
                {
                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("OpenSettings.Domains.Sql.Entities.SettingSqlModel", "Setting")
                        .WithOne("SettingClass")
                        .HasForeignKey("OpenSettings.Domains.Sql.Entities.SettingClassSqlModel", "SettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Setting");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.SettingHistorySqlModel", b =>
                {
                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "RestoredBy")
                        .WithMany()
                        .HasForeignKey("RestoredById");

                    b.HasOne("OpenSettings.Domains.Sql.Entities.SettingSqlModel", "Setting")
                        .WithMany("SettingHistories")
                        .HasForeignKey("SettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("RestoredBy");

                    b.Navigation("Setting");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.SettingSqlModel", b =>
                {
                    b.HasOne("OpenSettings.Domains.Sql.Entities.AppSqlModel", "App")
                        .WithMany("Settings")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSettings.Domains.Sql.Entities.SettingSqlModel", "CopiedFrom")
                        .WithMany()
                        .HasForeignKey("CopiedFromId");

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("OpenSettings.Domains.Sql.Entities.IdentifierSqlModel", "Identifier")
                        .WithMany()
                        .HasForeignKey("IdentifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("App");

                    b.Navigation("CopiedFrom");

                    b.Navigation("CreatedBy");

                    b.Navigation("Identifier");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.TagSqlModel", b =>
                {
                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.UserClaimMappingSqlModel", b =>
                {
                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserClaimSqlModel", "Claim")
                        .WithMany("UserClaimMappings")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "User")
                        .WithMany("UserClaimMappings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("CreatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.UserGroupClaimMappingModel", b =>
                {
                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserClaimSqlModel", "Claim")
                        .WithMany("GroupClaimMappings")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserGroupSqlModel", "Group")
                        .WithMany("GroupClaimMappings")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("CreatedBy");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.UserGroupMappingSqlModel", b =>
                {
                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserGroupSqlModel", "Group")
                        .WithMany("UserGroupMappings")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "User")
                        .WithMany("UserGroupMappings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.UserGroupNotificationMappingSqlModel", b =>
                {
                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserGroupSqlModel", "Group")
                        .WithMany("GroupNotificationMappings")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSettings.Domains.Sql.Entities.NotificationSqlModel", "Notification")
                        .WithMany("UserGroupNotificationMappings")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Group");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.UserNotificationMappingSqlModel", b =>
                {
                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("OpenSettings.Domains.Sql.Entities.NotificationSqlModel", "Notification")
                        .WithMany("UserNotificationMappings")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "User")
                        .WithMany("UserNotificationMappings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.UserRoleClaimMappingModel", b =>
                {
                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserClaimSqlModel", "Claim")
                        .WithMany("RoleClaimMappings")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserRoleSqlModel", "Role")
                        .WithMany("RoleClaimMappings")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("CreatedBy");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.UserRoleGroupMappingModel", b =>
                {
                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserGroupSqlModel", "Group")
                        .WithMany("RoleGroupMappings")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserRoleSqlModel", "Role")
                        .WithMany("RoleGroupMappings")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Group");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.UserRoleMappingSqlModel", b =>
                {
                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserRoleSqlModel", "Role")
                        .WithMany("UserRoleMappings")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSettings.Domains.Sql.Entities.UserSqlModel", "User")
                        .WithMany("UserRoleMappings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.AppGroupSqlModel", b =>
                {
                    b.Navigation("Apps");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.AppSqlModel", b =>
                {
                    b.Navigation("AppIdentifierMappings");

                    b.Navigation("AppTagMappings");

                    b.Navigation("Configurations");

                    b.Navigation("Instances");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.IdentifierSqlModel", b =>
                {
                    b.Navigation("AppIdentifierMappings");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.NotificationSqlModel", b =>
                {
                    b.Navigation("UserGroupNotificationMappings");

                    b.Navigation("UserNotificationMappings");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.SettingSqlModel", b =>
                {
                    b.Navigation("SettingClass");

                    b.Navigation("SettingHistories");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.TagSqlModel", b =>
                {
                    b.Navigation("AppTagMappings");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.UserClaimSqlModel", b =>
                {
                    b.Navigation("GroupClaimMappings");

                    b.Navigation("RoleClaimMappings");

                    b.Navigation("UserClaimMappings");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.UserGroupSqlModel", b =>
                {
                    b.Navigation("GroupClaimMappings");

                    b.Navigation("GroupNotificationMappings");

                    b.Navigation("RoleGroupMappings");

                    b.Navigation("UserGroupMappings");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.UserRoleSqlModel", b =>
                {
                    b.Navigation("RoleClaimMappings");

                    b.Navigation("RoleGroupMappings");

                    b.Navigation("UserRoleMappings");
                });

            modelBuilder.Entity("OpenSettings.Domains.Sql.Entities.UserSqlModel", b =>
                {
                    b.Navigation("UserClaimMappings");

                    b.Navigation("UserGroupMappings");

                    b.Navigation("UserNotificationMappings");

                    b.Navigation("UserRoleMappings");
                });
#pragma warning restore 612, 618
        }
    }
}
